#compdef scalafix
typeset -A opt_args
local context state line

_rule_names () {
   _values "rules" "DisableSyntax[Reports\ an\ error\ for\ disabled\ features\ such\ as\ var\ or\ XML\ literals.]" \
  "ExplicitResultTypes[Inserts\ type\ annotations\ for\ inferred\ public\ members.\ Only\ compatible\ with\ Scala\ 2.11.12,\ 2.12.13,\ 2.12.14,\ 2.12.15,\ 2.13.5,\ 2.13.6,\ 2.13.7.]" \
  "NoAutoTupling[Inserts\ explicit\ tuples\ for\ adapted\ argument\ lists\ for\ compatibility\ with\ -Yno-adapted-args]" \
  "NoValInForComprehension[Removes\ deprecated\ val\ inside\ for-comprehension\ binders]" \
  "ProcedureSyntax[Replaces\ deprecated\ procedure\ syntax\ with\ explicit\ \':\ Unit\ \=\']" \
  "RemoveUnused[Removes\ unused\ imports\ and\ terms\ that\ reported\ by\ the\ compiler\ under\ -Ywarn-unused]" \
  "LeakingImplicitClassVal[Adds\ \'private\'\ to\ val\ parameters\ of\ implicit\ value\ classes]"
}

local -a scalafix_opts
scalafix_opts=(
  "*--rules=[Scalafix\ rules\ to\ run,\ for\ example\ ExplicitResultTypes.\ The\ syntax\ for\ rules\ is\ documented\ in\ https://scalacenter.github.io/scalafix/docs/users/configuration\#rules]:rule:_rule_names" \
   "*-r=[Scalafix\ rules\ to\ run,\ for\ example\ ExplicitResultTypes.\ The\ syntax\ for\ rules\ is\ documented\ in\ https://scalacenter.github.io/scalafix/docs/users/configuration\#rules]:rule:_rule_names" \
   "--files[Files\ or\ directories\ \(recursively\ visited\)\ to\ fix.]" \
   "-f[Files\ or\ directories\ \(recursively\ visited\)\ to\ fix.]" \
   "--config[File\ path\ to\ a\ .scalafix.conf\ configuration\ file.\ Defaults\ to\ .scalafix.conf\ in\ the\ current\ working\ directory,\ if\ any.]" \
   "--check[Check\ that\ all\ files\ have\ been\ fixed\ with\ scalafix,\ exiting\ with\ non-zero\ code\ on\ violations.\ Won\'t\ write\ to\ files.]" \
   "--stdout[Print\ fixed\ output\ to\ stdout\ instead\ of\ writing\ in-place.]" \
   "--diff[If\ set,\ only\ apply\ scalafix\ to\ added\ and\ edited\ files\ in\ git\ diff\ against\ the\ master\ branch.]" \
   "--diff-base[If\ set,\ only\ apply\ scalafix\ to\ added\ and\ edited\ files\ in\ git\ diff\ against\ a\ provided\ branch,\ commit\ or\ tag.]" \
   "--syntactic[Run\ only\ syntactic\ rules,\ ignore\ semantic\ rules\ even\ if\ they\ are\ explicitly\ configured\ in\ .scalafix.conf\ or\ via\ --rules]" \
   "--triggered[Overlay\ the\ default\ rules\ \&\ rule\ settings\ in\ .scalafix.conf\ with\ the\ \`triggered\`\ section]" \
   "--verbose[Print\ out\ additional\ diagnostics\ while\ running\ scalafix.]" \
   "--help[Print\ out\ this\ help\ message\ and\ exit]" \
   "-h[Print\ out\ this\ help\ message\ and\ exit]" \
   "--version[Print\ out\ version\ number\ and\ exit]" \
   "-v[Print\ out\ version\ number\ and\ exit]" \
   "--classpath[Full\ classpath\ of\ the\ files\ to\ fix,\ required\ for\ semantic\ rules.\ The\ source\ files\ that\ should\ be\ fixed\ must\ be\ compiled\ with\ semanticdb-scalac.\ Dependencies\ are\ required\ by\ rules\ like\ ExplicitResultTypes,\ but\ the\ dependencies\ do\ not\ need\ to\ be\ compiled\ with\ semanticdb-scalac.]" \
   "--sourceroot[Absolute\ path\ passed\ to\ semanticdb\ with\ -P:semanticdb:sourceroot:\<path\>.\ Relative\ filenames\ persisted\ in\ the\ Semantic\ DB\ are\ absolutized\ by\ the\ sourceroot.\ Defaults\ to\ current\ working\ directory\ if\ not\ provided.]" \
   "--semanticdb-targetroots[Absolute\ paths\ passed\ to\ semanticdb\ with\ -P:semanticdb:targetroot:\<path\>.\ Used\ to\ locate\ semanticdb\ files.\ By\ default,\ Scalafix\ will\ try\ to\ locate\ semanticdb\ files\ in\ the\ classpath]" \
   "--auto-classpath[If\ set,\ automatically\ infer\ the\ --classpath\ flag\ by\ scanning\ for\ directories\ with\ META-INF/semanticdb]" \
   "--auto-classpath-roots[Additional\ directories\ to\ scan\ for\ --auto-classpath]" \
   "--scalac-options[The\ scala\ compiler\ options\ used\ to\ compile\ this\ --classpath,\ for\ example\ -Ywarn-unused-import]" \
   "--scala-version[The\ major\ or\ binary\ Scala\ version\ that\ the\ provided\ files\ are\ targeting,\ or\ the\ full\ version\ that\ was\ used\ to\ compile\ them\ when\ a\ classpath\ is\ provided.]" \
   "--bash[Print\ out\ bash\ tab\ completions.\ To\ install:\ \`\`\`\ \#\ macOS,\ requires\ \"brew\ install\ bash-completion\"\ scalafix\ --bash\ \>\ /usr/local/etc/bash_completion.d/scalafix\ \#\ Linux\ scalafix\ --bash\ \>\ /etc/bash_completion.d/scalafix\ \`\`\`\ ]" \
   "--zsh[Print\ out\ zsh\ tab\ completions.\ To\ install:\ \`\`\`\ scalafix\ --zsh\ \>\ /usr/local/share/zsh/site-functions/_scalafix\ unfunction\ _scalafix\ autoload\ -U\ _scalafix\ \`\`\`\ ]" \
   "--exclude[Unix-style\ glob\ for\ files\ to\ exclude\ from\ fixing.\ The\ glob\ syntax\ is\ defined\ by\ \`nio.FileSystem.getPathMatcher\`.]" \
   "--tool-classpath[Additional\ classpath\ for\ compiling\ and\ classloading\ custom\ rules,\ as\ a\ set\ of\ filesystem\ paths,\ separated\ by\ \':\'\ on\ Unix\ or\ \'\;\'\ on\ Windows.]" \
   "--charset[The\ encoding\ to\ use\ for\ reading/writing\ files]" \
   "--no-sys-exit[If\ set,\ throw\ exception\ in\ the\ end\ instead\ of\ System.exit]" \
   "--no-stale-semanticdb[Don\'t\ error\ on\ stale\ semanticdb\ files.]" \
   "--settings[Custom\ settings\ to\ override\ .scalafix.conf]" \
   "--out-from[Write\ fixed\ output\ to\ custom\ location\ instead\ of\ in-place.\ Regex\ is\ passed\ as\ first\ argument\ to\ file.replaceAll\(--out-from,\ --out-to\),\ requires\ --out-to.]" \
   "--out-to[Companion\ of\ --out-from,\ string\ that\ is\ passed\ as\ second\ argument\ to\ fileToFix.replaceAll\(--out-from,\ --out-to\)]" \
   "--auto-suppress-linter-errors[Insert\ /\*\ scalafix:ok\ \*/\ suppressions\ instead\ of\ reporting\ linter\ errors.]" \
   "--cwd[The\ current\ working\ directory]"
)

case $words[$CURRENT] in
      *) _arguments $scalafix_opts "*::filename:_files";;
esac

return 0

