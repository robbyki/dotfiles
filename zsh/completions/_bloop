#compdef bloop

_projects() {
    compadd "$@" $(bloop autocomplete --format zsh --mode projects 2> /dev/null)
    return 0
}

_commands() {
    compadd "$@" $(bloop autocomplete --format zsh --mode commands 2> /dev/null || _notStarted)
    return 0
}

_notStarted() {
    echo "server"
}

_reporters() {
    compadd "$@" $(bloop autocomplete --format zsh --mode reporters)
}

_protocols() {
    compadd "$@" $(bloop autocomplete --format zsh --mode protocols)
}

_boolean() {
    compadd "true" "false"
}

_testsfqcn() {
    local project="$words[2]"
    compadd "$@" $(bloop autocomplete --format zsh --mode testsfqcn --project $project)
}

_mainsfqcn() {
    local project="$words[2]"
    compadd "$@" $(bloop autocomplete --format zsh --mode mainsfqcn --project $project)
}

_flags() {
    local cmd="$words[1]"
    _flags_for_cmd $cmd
}

_flags_for_cmd() {
    local cmd=$1
    local saveIFS=$IFS
    IFS=$'\n'
    local flags=($(bloop autocomplete --format zsh --mode flags --command $cmd))
    flags=($flags ':approximate-4:::' )
    IFS=$saveIFS
    _arguments $flags
    return 0
}

_tests_or_flags() {
    local prev=${words[CURRENT-1]}
    local cmd=${words[1]}
    if [[ $prev = '--only' || $prev = '-o' ]] && [[ $cmd = 'test' ]] then
        _testsfqcn
    else
        _flags
    fi
}

_project_or_flags() {
    local project_cmd=($(bloop autocomplete --format zsh --mode project-commands))
    local cmd=${words[2]}
    # For project related commands, try to complete project. If not in a project
    # folder, switch to flags. Otherwise, complete flags
    if  [[ $CURRENT == 3 ]] && [[ -n "${project_cmd[(r)$cmd]}" ]]; then
        local projs=($(bloop autocomplete --format zsh --mode projects 2> /dev/null))
        if  [[ "$projs" != " " && "$projs" != "" ]]; then
            _projects
        else
            cmd=${words[2]}
            _flags_for_cmd $cmd
        fi
    else
        cmd=${words[2]}
        _flags_for_cmd $cmd
    fi
}

_arguments >/dev/null 2>&1  \
    ":command:_commands" \
    ":project_or_flags:_project_or_flags" \
    "*::flags:_tests_or_flags"

return 0
