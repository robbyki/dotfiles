-- local status_ok, gitsigns = pcall(require, "metals")
-- if not status_ok then
-- 	return
-- end
--
-- cmd = vim.cmd
-- cmd([[augroup lsp]])
-- cmd([[autocmd!]])
-- cmd([[autocmd FileType scala setlocal omnifunc=v:lua.vim.lsp.omnifunc]])
-- -- NOTE: You may or may not want java included here. You will need it if you want basic Java support
-- -- but it may also conflict if you are using something like nvim-jdtls which also works on a java filetype
-- -- autocmd.
-- cmd([[autocmd FileType java,scala,sbt lua require("metals").initialize_or_attach(metals_config)]])
-- cmd([[augroup end]])
--
-- ----------------------------------
-- -- LSP Setup ---------------------
-- ----------------------------------
-- metals_config = require("metals").bare_config()
--
-- -- Example of settings
-- metals_config.settings = {
-- 	showImplicitArguments = true,
-- 	showInferredType = true,
-- 	excludedPackages = {
-- 		"akka.actor.typed.javadsl",
-- 		"com.github.swagger.akka.javadsl",
-- 		"akka.stream.javadsl",
-- 	},
-- 	superMethodLensesEnabled = true,
-- }
-- metals_config.init_options.statusBarProvider = "on"
-- -- *READ THIS*
-- -- I *highly* recommend setting statusBarProvider to true, however if you do,
-- -- you *have* to have a setting to display this in your statusline or else
-- -- you'll not see any messages from metals. There is more info in the help
-- -- docs about this
-- -- metals_config.init_options.statusBarProvider = "on"
--
-- -- Example if you are using cmp how to make sure the correct capabilities for snippets are set
-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- metals_config.capabilities = require("cmp_nvim_lsp").update_capabilities(capabilities)
--
-- local dap = require("dap")
-- dap.configurations.scala = {
-- 	{
-- 		type = "scala",
-- 		request = "launch",
-- 		name = "Run",
-- 		metals = {
-- 			runType = "run",
-- 		},
-- 	},
-- 	{
-- 		type = "scala",
-- 		request = "launch",
-- 		name = "Test File",
-- 		metals = {
-- 			runType = "testFile",
-- 		},
-- 	},
-- 	{
-- 		type = "scala",
-- 		request = "launch",
-- 		name = "Test Target",
-- 		metals = {
-- 			runType = "testTarget",
-- 		},
-- 	},
-- }
