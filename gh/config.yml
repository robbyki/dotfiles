git_protocol: ssh
editor: nvim
prompt: enabled
pager: bat
aliases:
    co: '!id="$(gh pr list -L100 | fzf | cut -f1)"; [ -n "$id" ] && gh pr checkout "$id"'
    gct: repo create --template="git@github.com:robbyki/scala-spark-demo.git" "$1" --private
    grepo: repo view --web
    repos: |
        !gh api --paginate graphql -f owner="$1" -f query='
          query($owner: String!, $per_page: Int = 100, $endCursor: String) {
            repositoryOwner(login: $owner) {
              repositories(first: $per_page, after: $endCursor, ownerAffiliations: OWNER) {
                nodes { nameWithOwner }
                pageInfo { hasNextPage endCursor }
              }
            }
          }
        ' | jq -r '.data.repositoryOwner.repositories.nodes[].nameWithOwner' | sort
            list-milestones: |-
        !gh api --paginate graphql -F owner=':owner' -F name=':repo' -f query='
              query($per_page: Int = 100, $endCursor: String, $owner: String!, $name: String!) {
                repository(owner: $owner, name: $name) {
                  milestones(first: $per_page, after: $endCursor, states: OPEN, orderBy: {field:CREATED_AT, direction:DESC}) {
                    nodes {
                      title
                      number
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            ' | jq -r ".data.repository.milestones.nodes[] | [.number,.title] | @tsv"
    pr-files-changed: |-
        !gh api --paginate graphql -F owner=':owner' -F name=':repo' -F "pr=$1" -f query='
              query($per_page: Int = 100, $endCursor: String, $pr: Int!, $owner: String!, $name: String!) {
                repository(owner: $owner, name: $name) {
                  pullRequest(number: $pr) {
                    files(first: $per_page, after: $endCursor) {
                      edges {
                        node {
                          path
                        }
                      }
                      pageInfo {
                        endCursor
                        hasNextPage
                      }
                    }
                  }
                }
              }
            ' | jq -r ".data.repository.pullRequest.files.edges[] | [.node.path] | @tsv"
    list-repos: |-
        !gh api --paginate graphql -F owner="$1" -f query='
              query($owner: String!, $per_page: Int = 100, $endCursor: String) {
                repositoryOwner(login: $owner) {
                  repositories(first: $per_page, after: $endCursor, ownerAffiliations: OWNER) {
                    nodes {
                      nameWithOwner
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            ' | jq -r ".data.repositoryOwner.repositories.nodes[] | [.nameWithOwner] | @tsv"
    search-repos: |-
        !gh api graphql -F per_page="$1" -F q="$2" -f query='
              query($q: String!, $per_page: Int = 10, $endCursor: String) {
                search(query: $q, type: REPOSITORY, first: $per_page, after: $endCursor) {
                  nodes {
                    ...on Repository {
                      nameWithOwner
                      stargazers {
                        totalCount
                      }
                    }
                  }
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                }
              }
            ' | jq -r ".data.search.nodes[] | [.nameWithOwner,.stargazers.totalCount] | @tsv"
    clone: repo clone
