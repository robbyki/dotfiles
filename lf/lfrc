set cleaner ~/.config/lf/cleaner
set hidden
set incsearch
set icons
#set number
#set info size
set drawbox
set scrolloff 10
set reverse

# interpreter for shell commands
set shell zsh
set shellopts '-eu'

# set previewer using bat
# set previewer ~/.config/lf/pv.sh
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
set promptfmt "\033[32;1m%u\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
map i $~/.config/lf/pv.sh $f

#Dynamically set number of columns
%{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# disable
map "'"
map '"'
map c
map d
map e
map f
map m
map n
map o
map p
map v
map x
map y
map r

cmd select-all :unselect; invert

cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

map sa select-all
map C clear
map DD delete
map P paste-async
map R reload
map U unselect
map au %du -chD ${(f)fx} | tail -1
map ch chmod
map dd trash
map E $$EDITOR "$f"
map b broot_jump
map gD cd ~/Downloads
map gb cd ~/dev/blog
map gc cd ~/.config/
map gd cd ~/dev
map gn cd ~/.config/nvim
map gp. cd ~/Pictures
map gpt cd ~/dev/git-projects/aide-template
map gpu cd ~/dev/git-projects/aide-utilities
map gtr cd ~/.local/share/Trash/files
map md mkdir
map mf mkfile
map mr sudomkfile
map p paste
map rm sudorm
map rr rename
map ss stripspace
map tc clear_trash
map tr restore_trash
map vs push :glob-select<space>*.
map vu push :glob-unselect<space>*.
map x cut
map y copy
map cp copy-path
map zi z_fzf
map zj push :z<space>

# fzf mappings
map gf :fzfhere
map gF :fzfglobal
map gD :fzf_to_dir

# map g/ :fzf_select
# map gf :fzf_loc

cmd help $lf -doc| ~/.config/lf/less.sh

# Broot
cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd copy-path ${{
    set -f
    cbp $f
}}

# jump to any directory
cmd fzf_to_dir ${{
   FZF_DEFAULT_COMMAND="$FZF_ALT_C_COMMAND" 
   FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS"
   res="$(fzf)"
   cmd="cd"                                                       
   lf -remote "send $id $cmd \"$res\""
}}

# jump to anything in directory
cmd fzfglobal ${{
   FZF_DEFAULT_COMMAND="fd --type file -HL --no-ignore --exclude={'ScalaResources,.metals,.bloop,.git,.dropbox,.gem,.npm,.jfrog,target,.local,.vscode,node_modules'} -i . $HOME"
   # FZF_DEFAULT_COMMAND="fd --follow --exclude .git --color=always"
   # FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS"
   FZF_DEFAULT_OPTS="-i --no-mouse --ansi --layout=default --preview-window 'right:60%' --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
   res="$(fzf)"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
   lf -remote "send $id $cmd \"$res\""
}}

# jump to anything in directory
cmd fzfhere ${{
   FZF_DEFAULT_COMMAND="fd -tf -HL --no-ignore --exclude={'ScalaResources,.metals,.bloop,.git,.dropbox,.gem,.npm,.jfrog,target,.local,.vscode,node_modules'} -i ."
   FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS"
   res="$(fzf)"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi
   lf -remote "send $id $cmd \"$res\""
}}

# zoxide
cmd z %lf -remote "send $id cd '$(zoxide query $1)'"

cmd z_fzf ${{
      res="$(zoxide query -i)"

      if [ -f "$res" ]; then
	cmd="select"
      elif [ -d "$res" ]; then
	cmd="cd"                                                       
      fi

      lf -remote "send $id $cmd \"$res\""
}}

cmd z_add %zoxide add $f

cmd yank-dirname ${{
    dirname -- "$f" | tr -d '\n' | xclip -i -selection clipboard
}}

cmd yank-path ${{
    echo "$fx" | xclip -i -selection clipboard
}}

cmd yank-basename ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      xclip -i -selection clipboard
}}

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

map <enter> shell

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f


# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
	image/vnd.djvu|application/pdf|application/octet-stream) setsid -f okular $fx >/dev/null 2>&1 ;;
        text/*) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
#	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | feh -aio 2>/dev/null | lf-select ;;
	image/*) feh -aio $f ;;
	audio/*) mpv --audio-display=no $f ;;
  "mp4"|"mkv"|"webm"|"flv")
					vlc $f 1>/dev/null 2>&1 &;;
	application/pdf|application/vnd*|application/epub*) setsid -f okular $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

# vim-style quit
cmd q quit

cmd fzf_select ${{
    file=$(find . -mindepth 1 -maxdepth 1 -printf '%P\n' 2> /dev/null |
            fzf +m --header='Select file/directory') || return 0
    file="$(echo "$file" | sed 's/"/\\"/g')"
    lf -remote "send $id select \"$file\""
}}

cmd sudorm %{{
	printf "sure (yes/no)"
	read ans
	if [[ $ans == 'yes' ]];then
		sudo rm -r $f
	else
		exit
	fi
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.xz) tar -xvf ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd stripspace %stripspace "$f"

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}








#cmd delete ${{
#    clear;
#    set -f;
#    printf '%s\n' $fx;
#    printf '%s\n%s\n' ${(l.COLUMNS..-.)$(<<<-)} 'delete above files? [y/*]';
#    [[ $(read -seq ) == y ]] && rm -rf $fx;
#}}
#map D           delete; reload

#map ee $nvim "$f"                            # open file in editor
# map ec edit_config                              # edit & source lfrc
# map erc $$EDITOR ~/.config/nvim/init.lua            # open nvim config
# map ea $$EDITOR ~/.config/alacritty/alacritty.yml            # open nvim config

#cmd fzf_jump ${{
#   res="$(fd --type d -a -HL --exclude={'.git,.dropbox,.gem,.npm,.jfrog,target,.local,.vscode,node_modules'} . . | fzf --reverse --header='Jump to file')"
#   if [ -f "$res" ]; then
#     cmd="select"
#   elif [ -d "$res" ]; then
#     cmd="cd"
#   fi
#lf -remote "send $id $cmd \"$res\""
#}}
#
#cmd fzf_loc ${{
#    res=$(rg --files | fzf --reverse --header='Jump to location' --preview "bat {}")
#    if [ -f "$res" ]; then
#        cmd="select"
#    elif [ -d "$res" ]; then
#         cmd="cd"
#    fi
#    lf -remote "send $id $cmd \"$res\""
#}}
#
#cmd fzf ${{
#  res="$(sudo find / -maxdepth 3 | fzf --reverse --header='Jump to location')"
#  if [ -f "$res" ]; then
#    cmd="select"
#  elif [ -d "$res" ]; then
#    cmd="cd"
#  fi
#  lf -remote "send $id $cmd \"$res\""
#}}

#cmd rg ${{
#    res=$(rg --hidden -ilwL $1 | fzf --header='Jump to location' \
#        --preview "bat {} | rg --color always -B3 -A3 $1")
#    if [ -f "$res" ]; then
#        cmd="select"
#    elif [ -d "$res" ]; then
#         cmd="cd"
#    fi
#    lf -remote "send $id $cmd \"$res\""
#}}

#cmd fzf_jump ${{
#  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
#  if [ -f "$res" ]; then
#    cmd="select"
#  elif [ -d "$res" ]; then
#    cmd="cd"
#  fi
#  lf -remote "send $id $cmd \"$res\""
#}}

#map x $$f
#map X !$f
# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
#cmd open ${{
#    test -L $f && f=$(readlink -f $f)
#    case $(file --mime-type $f -b) in
#        text/*) $EDITOR $fx;;
#        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
#    esac
#}}
# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
#cmd trash %set -f; mv $fx ~/.trash

# Trash cli bindings
# define a custom 'delete' command
#cmd delete ${{
#    set -f
#    printf "$fx\n"
#    printf "delete?[y/n]"
#    read ans
#    [ $ans = "y" ] && rm -rf $fx
#}}

#map i $~/.config/lf/pv.sh "$f" | ~/.config/lf/less.sh
